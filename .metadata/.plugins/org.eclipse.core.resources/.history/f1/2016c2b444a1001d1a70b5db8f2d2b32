package com.nv.foodapp.service.item;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.nv.foodapp.entity.Item;
import com.nv.foodapp.entity.Restaurant;
import com.nv.foodapp.exception.InvalidInputDataException;
import com.nv.foodapp.repository.item.ItemRepository;
import com.nv.foodapp.repository.restaurant.IRestaurantRepository;

import jakarta.persistence.EntityNotFoundException;
import jakarta.transaction.Transactional;

@Service
public class ItemServiceImpl implements IItemService {
	
	@Autowired
	ItemRepository itemrepository;
	
	@Autowired
	IRestaurantRepository restaurantRepository;

	@Override
	@Transactional
	public Item addItem(Item item) throws Exception {
		// TODO Auto-generated method stub
		if(item!=null) {
			if(item.getItemName().equals("")) {
				throw new InvalidInputDataException("item name","item name is null");
			}
			Item savedItem=itemrepository.save(item);
			return savedItem;
		}
		else throw new NullPointerException("item is null");
	
	}

	@Override
	public Item viewItemById(int id) throws Exception {
		// TODO Auto-generated method stub
		
		if(id >=1)
		{
			Item savedItem =  itemrepository.getReferenceById(id);
			if(savedItem != null) return savedItem;
			else 
			{
				throw new EntityNotFoundException("Invalid Item ID : "+id);
			}
		}
		return null;
	}

	@Override
	public Item updateRestaurantBYItem(int restaurantid, int itemid) throws Exception {
		// TODO Auto-generated method stub
		
       Item itemFromDB=viewItemById(itemid);
		
		// 2. get course 
		Restaurant restaurantFromDB = restaurantRepository.getReferenceById(restaurantid);
		
		// if student & course both are valid and available in DB then 
		if(itemFromDB != null & restaurantFromDB != null)
		{
			List<Item> allItems =restaurantFromDB.getItem();
			
			if(allItems != null && allItems.isEmpty() == false)
			{
				allItems.add(itemFromDB);
				restaurantFromDB.setItem(itemFromDB);;
			}
			else // if course are null  then create ArrayList and add Student
			{
				List<Student> newStudentList = new ArrayList<>();
				newStudentList.add(studentFromDB);
				courseFromDB.setStudents(newStudentList);
			}
			// call repository save method
			courseRepository.saveAndFlush(courseFromDB);
			studentRepository.save(studentFromDB);
			return studentFromDB;
		}
		else
		{
			// if student or course not in the db
			throw new NullPointerException("Either Student "+studentFromDB+"or Course "+courseFromDB+" is Null ");
		}
		
		return null;
	}

	@Override
	public Item removeItem(String id) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<Item> viewAllItems(Restaurant res) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Item viewAllItemsByName(String name) {
		// TODO Auto-generated method stub
		return null;
	}
     
	

}
